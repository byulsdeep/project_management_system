/* PMS */
  /* TABLES 
    0-1. MEMBERLEVEL(MLV) : 멤버등급
         등급코드, 등급명
    0-2. CLASSES(CLA) : 멤버가 소속되어있는 반
         반코드, 반명, 기수
    1. PMSMEMBERS(PMB) : 프로젝트에 참여 할 수 있는 멤버
         멤버코드, 인증패스워드, 멤버명, 등급코드, 반코드
  */
-- 0-1 DBA:MEMBERLEVEL(MLV)
CREATE TABLE MEMBERLEVEL(
  MLV_CODE  NCHAR(1) NOT NULL,
  MLV_NAME  NVARCHAR2(10) NOT NULL
)TABLESPACE USERS;

  -- DBA:CONSTRAINTS
  ALTER TABLE MEMBERLEVEL
  ADD CONSTRAINT MLV_CODE_PK    PRIMARY KEY(MLV_CODE);
  -- DEV:PERSONAL SYNONYM
  CREATE PUBLIC SYNONYM MLV FOR MEMBERLEVEL;
  
  -- DEV:DATA INPUT
  INSERT INTO MLV(MLV_CODE, MLV_NAME) VALUES('S', 'STUDENT');
  INSERT INTO MLV(MLV_CODE, MLV_NAME) VALUES('T', 'TEACHER');
  INSERT INTO MLV(MLV_CODE, MLV_NAME) VALUES('E', 'EMPLOYEE');
  COMMIT; 
  
-- 0-2. CLASSES(CLA)
CREATE TABLE CLASSES(
  CLA_CODE      NCHAR(3)        NOT NULL,
  CLA_NAME      NVARCHAR2(50)   NOT NULL,
  CLA_NUM       NUMBER(2, 0)    NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE CLASSES
  ADD CONSTRAINT CLA_CODE_PK PRIMARY KEY(CLA_CODE);
  
  -- SYNONYM
  CREATE PUBLIC SYNONYM CLA FOR CLASSES;
  
  -- DATA INPUT
  INSERT INTO CLA(CLA_CODE, CLA_NAME, CLA_NUM) VALUES('F01', 'JS프레임워크를 활용한 스마트 웹 개발자', 3);
  COMMIT;
  
-- 1. PMSMEMBERS(PMB)
CREATE TABLE PMSMEMBERS(
  PMB_CODE      NCHAR(8)        NOT NULL,  -- YYYYMM+순번
  PMB_PASSWORD  NVARCHAR2(500)  NOT NULL,  -- 암호화
  PMB_NAME      NVARCHAR2(5)    NOT NULL,
  PMB_MLVCODE   NCHAR(1)        NOT NULL,
  PMB_CLACODE   NCHAR(3)        NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE PMSMEMBERS
  ADD CONSTRAINT PMB_CODE_PK    PRIMARY KEY(PMB_CODE)
  ADD CONSTRAINT PMB_MLVCODE_FK FOREIGN KEY(PMB_MLVCODE) REFERENCES MEMBERLEVEL(MLV_CODE)
  ADD CONSTRAINT PMB_CLACODE_FK FOREIGN KEY(PMB_CLACODE) REFERENCES CLASSES(CLA_CODE);
  
  -- SYNONYM
  CREATE PUBLIC SYNONYM PMB FOR PMSMEMBERS;
  
  -- PMBNAME 데이터 사이즈 늘이기
  ALTER TABLE PMSMEMBERS
  MODIFY PMB_NAME NVARCHAR2(200);
  
  -- EMAIL COLUMN 추가
  ALTER TABLE PMSMEMBERS
  ADD PMB_EMAIL NVARCHAR2(100) NOT NULL;
  
  -- EMAIL --> UNIQUE NOT NULL
  ALTER TABLE PMSMEMBERS
  ADD CONSTRAINT PMB_EMAIL_UK   UNIQUE(PMB_EMAIL);
  
    -- DATA INPUT
  INSERT INTO PMB(PMB_CODE, PMB_PASSWORD, PMB_NAME, PMB_MLVCODE, PMB_CLACODE, PMB_EMAIL) 
  VALUES('20220401', '1234', '훈짱', 'T', 'F01', 'hoonzzang@email.com');
  COMMIT;
  
-- 2. ACCESSLOG(ASL)  -- 중복 로그인 허용 X
CREATE TABLE ACCESSLOG(
  ASL_PMBCODE   NCHAR(8) NOT NULL, 
  ASL_DATE      DATE DEFAULT SYSDATE NOT NULL,
  ASL_PUBLICIP  NVARCHAR2(15)   NOT NULL,
  ASL_PRIVATEIP NVARCHAR2(15)   NOT NULL,
  ASL_ACTION    NUMBER(1)   NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE ACCESSLOG
  ADD CONSTRAINT ASL_PMBCODE_DATE_PIP_RIP_ACT_P PRIMARY KEY(ASL_PMBCODE, ASL_DATE, ASL_PUBLICIP, ASL_PRIVATEIP, ASL_ACTION)
  ADD CONSTRAINT ASL_PMBCODE_FK FOREIGN KEY(ASL_PMBCODE) REFERENCES PMSMEMBERS(PMB_CODE);
  
  -- SYNONYM    
  CREATE PUBLIC SYNONYM ASL FOR ACCESSLOG;

-- TABLE CHECK
--SELECT * FROM USER_TABLES;
--SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME IN('ACCESSLOG', 'PMSMEMBERS', 'MEMBERLEVEL', 'CLASSES');
--SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME IN('ACCESSLOG', 'PMSMEMBERS', 'MEMBERLEVEL', 'CLASSES')
--ORDER BY TABLE_NAME;

-- DATA CHECK
--SELECT MLV_CODE AS PMBLEVEL, MLV_NAME AS PMBLEVELNAME FROM MLV;
--SELECT CLA_CODE AS PMBCLASS, CLA_NAME || '[' || CLA_NUM || ']' AS PMBCLASSNAME FROM CLA;
--SELECT * FROM PMB;
--DELETE FROM PMB WHERE PMB_CODE = '20220706';
/* 회원코드 검색 */
--SELECT NVL(TO_CHAR(TO_NUMBER(MAX(PMB_CODE)) + 1), TO_CHAR(SYSDATE, 'YYYYMM') || '01') AS PMBCODE FROM PMB WHERE SUBSTR(PMB_CODE, 1,6) = TO_CHAR(SYSDATE, 'YYYYMM');

--DELETE FROM PMB;
COMMIT;

/* ACCESSLOG INS */
--INSERT INTO(ASL_PMBCODE, ASL_DATE, ASL_PUBLICIP, ASL_PRIVATEIP, ASL_ACTION) 
--VALUES(, DEFAULT, , ,);

CREATE OR REPLACE VIEW LASTACCESS
AS
SELECT  ASL_PMBCODE AS PMBCODE, 
        ASL_PUBLICIP AS ASLPUBLICIP, 
        ASL_PRIVATEIP AS ASLPRIVATEIP, 
        TO_CHAR(MAX(ASL_DATE), 'YYYYMMDDHH24MISS') AS ASLDATE
FROM ASL
WHERE ASL_ACTION = 1
GROUP BY ASL_PMBCODE, ASL_PUBLICIP, ASL_PRIVATEIP;

CREATE OR REPLACE VIEW ACCESSINFO
AS
SELECT  PMB_CODE AS PMBCODE, 
        PMB_NAME AS PMBNAME, 
        PMB_MLVCODE AS MLVCODE, 
        MLV.MLV_NAME AS MLVNAME, 
        PMB_CLACODE AS CLACODE, 
        CLA.CLA_NAME AS CLANAME,
        LAS.ASLDATE AS ASLDATE,
        LAS.ASLPUBLICIP AS PUBLICIP,
        LAS.ASLPRIVATEIP AS PRIVATEIP,
        PMB.PMB_EMAIL AS EMAIL
FROM PMB INNER JOIN MLV ON PMB.PMB_MLVCODE = MLV.MLV_CODE
         INNER JOIN CLA ON PMB.PMB_CLACODE = CLA.CLA_CODE
         INNER JOIN LASTACCESS LAS ON PMB.PMB_CODE = LAS.PMBCODE;

--DELETE FROM ASL WHERE ASL_PMBCODE = '20220701';
COMMIT;

--SELECT COALESCE(SUM(ASL_ACTION), 0) AS ACTIONSTATE FROM ASL WHERE ASL_PMBCODE = '20220701';



-- ACCESSLOG CHECK
--SELECT * FROM ASL;
--SELECT * FROM ASL WHERE ASL_PMBCODE = '20220701' AND TO_CHAR(ASL_DATE, 'YYMMDD') = TO_CHAR(SYSDATE, 'YYMMDD');
--SELECT * FROM ACCESSINFO WHERE PMBCODE = '20220701';

-- 현재 로그인한 계정 리스트
--SELECT ASL_PUBLICIP, ASL_PRIVATEIP FROM ASL
--WHERE ASL_PMBCODE IN (SELECT ASL_PMBCODE FROM ACCESSLOG);


--SELECT ASL_PUBLICIP, ASL_PRIVATEIP FROM ASL 
--WHERE ASL_PMBCODE = '' AND TO_CHAR(ASL_DATE, 'YYMMDD') = TO_CHAR(SYSDATE, 'YYMMDD');



--SELECT ASL_PUBLICIP, ASL_PRIVATEIP
--FROM ASL 
--WHERE TO_CHAR(ASL_DATE, 'YYMMDD') = TO_CHAR(SYSDATE, 'YYMMDD') AND ASL_PMBCODE = '20220701'
--GROUP BY ASL_PMBCODE, ASL_PUBLICIP, ASL_PRIVATEIP 
--HAVING SUM(ASL_ACTION) = 1;


--INSERT INTO ASL(ASL_PMBCODE, ASL_DATE, ASL_PUBLICIP, ASL_PRIVATEIP, ASL_ACTION) 
--VALUES('20220701', DEFAULT, '106.243.194.229', '192.168.0.54', -1);
--INSERT INTO ASL(ASL_PMBCODE, ASL_DATE, ASL_PUBLICIP, ASL_PRIVATEIP, ASL_ACTION) 
--VALUES('20220701', DEFAULT, '106.243.194.229', '192.168.0.54', 1);




/* PROJECT TABLE(PRO) */
CREATE TABLE PROJECTS(
  PRO_CODE      NCHAR(20)       NOT NULL,   -- YYMMDDHH24MISS + PMBCODE
  PRO_NAME      NVARCHAR2(100)  NOT NULL,
  PRO_COMMENTS  NVARCHAR2(2000) NOT NULL,
  PRO_START     DATE            NOT NULL,
  PRO_END       DATE            NOT NULL,
  PRO_VISIBLE   NCHAR(1)        NOT NULL   -- T F
)TABLESPACE USERS;
  -- CONSTRAINTS
  ALTER TABLE PROJECTS
  ADD CONSTRAINT PRO_CODE_PK    PRIMARY KEY(PRO_CODE);
  -- SYNONYM
  CREATE OR REPLACE PUBLIC SYNONYM PRO FOR PROJECTS;
  
/* PROJECT CATEGORY CODE(PCC) */
CREATE TABLE CATEGORYCODE(
  PCC_CODE  NCHAR(2)        NOT NULL,
  PCC_NAME  NVARCHAR2(10)   NOT NULL
)TABLESPACE USERS;
  -- CONSTRAINTS
  ALTER TABLE CATEGORYCODE 
  ADD CONSTRAINT PCC_CODE_PK    PRIMARY KEY(PCC_CODE);
  -- SYNONYM
  CREATE OR REPLACE PUBLIC SYNONYM PCC FOR CATEGORYCODE;
  -- DATA
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('MG', 'MANAGER');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('PT', 'PART-MANAGER');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('MB', 'MEMBER');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('ST', '초청장 발송');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('AC', '수락');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('RF', '거부');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('NA', '인증 전');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('AU', '인증완료');
  INSERT INTO PCC(PCC_CODE, PCC_NAME) VALUES('NN', '인증실패');
  DELETE FROM PCC WHERE PCC_CODE = 'NN';
  COMMIT;
  
/* PROJECT MEMBER TABLE(PRM) */
CREATE TABLE PROJECTMEMBERS(
  PRM_PROCODE   NCHAR(20)   NOT NULL,
  PRM_PMBCODE   NCHAR(8)    NOT NULL,
  PRM_POSITION  NCHAR(1)    NOT NULL,
  PRM_ACCEPT    NCHAR(2)    DEFAULT 'ST' NOT NULL
)TABLESPACE USERS;
  -- CONSTRAINTS
  ALTER TABLE PROJECTMEMBERS
  ADD CONSTRAINT PRM_PRO_PMB_CODE_PK    PRIMARY KEY(PRM_PROCODE, PRM_PMBCODE)
  ADD CONSTRAINT PRM_PROCODE_FK FOREIGN KEY(PRM_PROCODE) REFERENCES PROJECTS(PRO_CODE)
  ADD CONSTRAINT PRM_PMBCODE_FK FOREIGN KEY(PRM_PMBCODE) REFERENCES PMSMEMBERS(PMB_CODE)
  ADD CONSTRAINT PRM_POSITION_FK FOREIGN KEY(PRM_POSITION) REFERENCES CATEGORYCODE(PCC_CODE)
  ADD CONSTRAINT PRM_ACCEPT_FK FOREIGN KEY(PRM_ACCEPT) REFERENCES CATEGORYCODE(PCC_CODE);
  
  -- SYNONYM
  CREATE PUBLIC SYNONYM PRM FOR PROJECTMEMBERS;
  
  -- PRM_POSITION NULL로 변경
  ALTER TABLE PROJECTMEMBERS
  MODIFY PRM_POSITION NULL;
  -- PRM_POSITION : NCHAR(2)로 변경
  ALTER TABLE PROJECTMEMBERS
  MODIFY PRM_POSITION NCHAR(2);
/* AUTHLOG (AUL) */
CREATE TABLE AUTHLOG(
  AUL_SPMBCODE          NCHAR(8)    NOT NULL,
  AUL_RPMBCODE          NCHAR(8)    NOT NULL,
  AUL_INVITEDATE        DATE     DEFAULT SYSDATE NOT NULL, 
  AUL_EXPIRE            NUMBER   DEFAULT 5       NOT NULL,
  AUL_AUTHRESULT        NCHAR(2) DEFAULT 'NA'    NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE AUTHLOG
  ADD CONSTRAINT AUL_SPMB_RPMB_INVITE_PK   PRIMARY KEY(AUL_SPMBCODE, AUL_RPMBCODE, AUL_INVITEDATE)
  ADD CONSTRAINT AUL_SPMBCODE_FK    FOREIGN KEY(AUL_SPMBCODE) REFERENCES PMSMEMBERS(PMB_CODE)
  ADD CONSTRAINT AUL_RPMBCODE_FK    FOREIGN KEY(AUL_RPMBCODE) REFERENCES PMSMEMBERS(PMB_CODE)
  ADD CONSTRAINT AUL_AUTHRESULT_FK  FOREIGN KEY(AUL_AUTHRESULT) REFERENCES CATEGORYCODE(PCC_CODE);
  
  -- SYNONYM
  CREATE OR REPLACE PUBLIC SYNONYM   AUL FOR AUTHLOG;

--DELETE FROM AUL;
--DELETE FROM PRM;
--DELETE FROM PRO;
COMMIT;

  /* MEMBER INFO */
  DESC MEMBERLIST;
  
CREATE OR REPLACE VIEW MEMBERLIST
AS
SELECT  PMB.PMB_CODE AS PMBCODE, 
        PMB.PMB_NAME AS PMBNAME,
        PMB.PMB_EMAIL AS EMAIL,
        PMB.PMB_MLVCODE AS MLVCODE,
        MLV.MLV_NAME AS MLVNAME,
        PMB.PMB_CLACODE AS CLACODE,
        CLA.CLA_NAME AS CLANAME
FROM PMB INNER JOIN MLV ON PMB.PMB_MLVCODE = MLV.MLV_CODE
         INNER JOIN CLA ON PMB.PMB_CLACODE = CLA.CLA_CODE;
--SELECT * FROM PMBMEMBERS;
--SELECT * FROM PMB; /* 01 09 07 02 08 */
--DELETE FROM ASL WHERE ASL_PMBCODE NOT IN('20220701', '20220709', '20220707', '20220702', '20220708');
--DELETE FROM PMB WHERE PMB_CODE NOT IN('20220701', '20220709', '20220707', '20220702', '20220708');
COMMIT;

--SELECT * FROM ASL;
--DELETE FROM ASL WHERE ASL_PMBCODE = '20220703';
--DELETE FROM PMB WHERE PMB_CODE = '20220703';
COMMIT;

--SELECT * FROM PROJECTS;
--SELECT * FROM PRM;

--DELETE FROM PRM;
--DELETE FROM PRO;
COMMIT;
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--			VALUES('20220714082420220707', '20220707', null, default);
--SELECT * FROM PRM;

/* 로그인 한 계정의 초대장 알림체크 */
--SELECT SYSDATE, SYSDATE + (5/(24*60)) FROM DUAL;
CREATE OR REPLACE VIEW RINVITEINFO
AS
SELECT  AUL.AUL_SPMBCODE AS SENDER, PMB.PMB_NAME  AS SENDERNAME,
        AUL.AUL_RPMBCODE AS RECIPIENT, AUL.AUL_AUTHRESULT AS AUTHRESULT, 
        AUL.AUL_INVITEDATE AS INVITEDATE,
        AUL.AUL_INVITEDATE + (5 / (24*60)) AS EXPIREDATE
FROM AUL INNER JOIN PMB ON  AUL.AUL_SPMBCODE = PMB.PMB_CODE;

/* 받은 초청장 정보 */
--SELECT 	SENDER, SENDERNAME, RECEIVER, TO_CHAR(INVITEDATE,'YYYYMMDDHH24MISS') AS INVITEDATE, 
--		TO_CHAR(EXPIREDATE, 'YYYYMMDDHH24MISS') AS EXPIREDATE
--FROM RINVITEINFO 
--WHERE RECEIVER = '20220701' AND INVITEDATE >= (SYSDATE - 1);

/* 보낸 초청장 정보 */
CREATE OR REPLACE VIEW SINVITEINFO
AS
SELECT  AUL.AUL_SPMBCODE AS SENDER, 
        AUL.AUL_RPMBCODE AS RECIPIENT, 
        PMB.PMB_NAME  AS RECIPIENTNAME, 
        AUL.AUL_AUTHRESULT AS AUTHRESULT, 
        AUL.AUL_INVITEDATE AS INVITEDATE,
        AUL.AUL_INVITEDATE + (5 / (24*60)) AS EXPIREDATE,
        PCC.PCC_NAME AS AUTHRESULTNAME
FROM AUL INNER JOIN PMB ON  AUL.AUL_RPMBCODE = PMB.PMB_CODE
         INNER JOIN PCC ON  AUL.AUL_AUTHRESULT = PCC.PCC_CODE;

/* 보낸 초청장 정보 */
--SELECT 	SENDER, RECEIVER, RECEIVERNAME, TO_CHAR(INVITEDATE,'YYYYMMDDHH24MISS') AS INVITEDATE, 
--        TO_CHAR(EXPIREDATE, 'YYYYMMDDHH24MISS') AS EXPIREDATE, AUTHRESULT, AUTHRESULTNAME
--FROM SINVITEINFO
--WHERE SENDER = '20220701' AND INVITEDATE >= (SYSDATE - 2);

--SELECT * FROM PCC;
--SELECT * FROM PRO; -- 22072011100820220701
--SELECT * FROM PRM WHERE PRM_PROCODE = '22072011100820220701';
--SELECT * FROM AUL WHERE AUL_SPMBCODE = '20220701' ;
--SELECT * FROM PMBMEMBERS WHERE PMB_CODE != '20220701';


/* PROJECT INFO 

   PROJECT NAME     >> PRO
   PROJECT DIRECTOR >> PRM = PMB << MG
   PROJECT PERIOD   >> PRO
*/
CREATE OR REPLACE VIEW PROJECTLIST2
AS
SELECT  PRO_CODE AS PROJECTCODE,
        PRO_NAME AS PROJECTNAME,
        PRM_PMBCODE AS PMBCODE,
        PRM_ACCEPT AS ISACCEPT,
        PRM_POSITION AS POSITION,
        PRM.PRM_PMBCODE AS MANAGER,
       PMB.PMB_NAME AS MANAGERNAME,
       TO_CHAR(PRO_START, 'YYYY-MM-DD') AS STARTDATE,
       TO_CHAR(PRO_END, 'YYYY-MM-DD') AS ENDDATE,
        TO_CHAR(PRO_START, 'YYYY-MM-DD') || ' ~ ' || TO_CHAR(PRO_END, 'YYYY-MM-DD') AS "PERIOD",
        PRO_COMMENTS AS PROJECTCOMMENT
FROM PRO INNER JOIN PRM ON PRO.PRO_CODE = PRM.PRM_PROCODE
         INNER JOIN PMB ON PRM.PRM_PMBCODE = PMB.PMB_CODE;
-- MYBATIS()
SELECT 
    PROJECTCODE, 
    PROJECTNAME, 
    "PERIOD",
       PRM.PRM_PMBCODE AS MANAGER,
       PMB.PMB_NAME AS MANAGERNAME
FROM PROJECTLIST2 MP INNER JOIN PRM ON MP.PROJECTCODE = PRM.PRM_PROCODE
                  INNER JOIN PMB ON PRM.PRM_PMBCODE = PMB.PMB_CODE                  
WHERE MP.PMBCODE = '20220714' AND MP.PRMACCEPT = 'AC' AND PRM.PRM_POSITION = 'MG';

-- DATA
--UPDATE PRM SET PRM_POSITION = 'MG' WHERE PRM_PMBCODE = '20220701' AND PRM_ACCEPT='AC';

--SELECT * FROM PRM;




--UPDATE PRM SET PRM_ACCEPT = 'AC' WHERE PRM_PMBCODE = '20220714';
--UPDATE PRM SET PRM_POSITION = NULL WHERE PRM_PMBCODE = '20220714';
--COMMIT;
--SELECT * FROM PRM WHERE PRM_PROCODE IN('22072013580920220701', '22072011100820220701'); 
        


--SELECT * FROM PRO;
--SELECT * FROM PCC;
--SELECT * FROM PRM;
--SELECT * FROM AUL;
--
--DELETE FROM AUL;
--DELETE FROM PRM;
--DELETE FROM PRO;
COMMIT;

/* PROJECTMEMBERS UPDATE */
--UPDATE PRM SET PRM_ACCEPT = '' WHERE PRM_PROCODE = '' AND PRM_PMBCODE = '';
/* AUTHLOG UPDATE */
--UPDATE AUL SET AUL_AUTHRESULT = '' WHERE AUL_SPMBCODE = '' AND AUL_RPMBCODE = '' AND AUL_INVITEDATE = TO_DATE('', 'YYYYMMDDHH24MISS');


--SELECT * FROM PRO;
--SELECT * FROM PRM;
/* MODULES(MOU)
  PK FK 프로젝트코드
  PK    모듈코드
     NN 모듈명
        모듈설명
*/
CREATE TABLE MODULES(
  MOU_PROCODE   NCHAR(20)       NOT NULL,
  MOU_CODE      NCHAR(2)        NOT NULL,
  MOU_NAME      NVARCHAR2(100)  NOT NULL,
  MOU_COMMENTS  NVARCHAR2(200)  NOT NULL
)TABLESPACE USERS;

-- CONSTRAINTS
ALTER TABLE MODULES
ADD CONSTRAINT MOU_PROCODE_CODE_PK  PRIMARY KEY(MOU_PROCODE, MOU_CODE)
ADD CONSTRAINT MOU_PROCODE_FK   FOREIGN KEY(MOU_PROCODE) REFERENCES PROJECTS(PRO_CODE);

-- SYNONYM
CREATE PUBLIC SYNONYM MOU  FOR MODULES; 


/* JOB(JOB) 
  PK FK 프로젝트코드
  PK    업무코드
     NN 업무명
        업무설명
*/
CREATE TABLE JOBS(
 JOS_PROCODE    NCHAR(20)       NOT NULL,
 JOS_CODE       NCHAR(3)        NOT NULL, 
 JOS_NAME       NVARCHAR2(100)  NOT NULL,
 JOS_COMMENTS   NVARCHAR2(200)
)TABLESPACE USERS;

-- CONSTRAINTS
ALTER TABLE JOBS
ADD CONSTRAINT JOS_PROCODE_CODE_PK  PRIMARY KEY(JOS_PROCODE, JOS_CODE)
ADD CONSTRAINT JOS_PROCODE_FK   FOREIGN KEY(JOS_PROCODE) REFERENCES PROJECTS(PRO_CODE);

-- SYNONYM
CREATE PUBLIC SYNONYM  JOS FOR JOBS;

/* MODULE_JOB (MJ)
  PK FK FK FK   프로젝트코드
  PK FK         모듈코드
  PK    FK      업무코드
           FK   담당자
*/
--SELECT * FROM PRM;
CREATE TABLE MODULE_JOB(
 MJ_PROCODE     NCHAR(20)       NOT NULL,
 MJ_MOUCODE     NCHAR(2)        NOT NULL,
 MJ_JOSCODE     NCHAR(3)        NOT NULL,
 MJ_PRMPMBCODE  NCHAR(8)        NOT NULL
)TABLESPACE USERS;

-- CONSTRAINTS
ALTER TABLE MODULE_JOB
ADD CONSTRAINT MJ_PRO_MOU_JOS_CODE_PK   PRIMARY KEY(MJ_PROCODE, MJ_MOUCODE, MJ_JOSCODE)
ADD CONSTRAINT MJ_PRO_MOU_CODE_FK   FOREIGN KEY(MJ_PROCODE, MJ_MOUCODE) 
    REFERENCES MODULES(MOU_PROCODE, MOU_CODE)
ADD CONSTRAINT MJ_PRO_JOS_CODE_FK   FOREIGN KEY(MJ_PROCODE, MJ_JOSCODE) 
    REFERENCES JOBS(JOS_PROCODE, JOS_CODE)
ADD CONSTRAINT MJ_PRO_PRM_CODE_FK   FOREIGN KEY(MJ_PROCODE, MJ_PRMPMBCODE) 
    REFERENCES PROJECTMEMBERS(PRM_PROCODE, PRM_PMBCODE);

-- SYNONYM
CREATE PUBLIC SYNONYM    MJ FOR MODULE_JOB;

/* METHODCATEGORIES (MC)
  PK 분류코드
  NN 분류명 
*/
CREATE TABLE METHODCATEGORIES(
  MC_CODE   NCHAR(2)        NOT NULL,
  MC_NAME   NVARCHAR2(20)   NOT NULL
)TABLESPACE USERS;

-- CONSTRAINTS
ALTER TABLE METHODCATEGORIES
ADD CONSTRAINT MC_CODE_PK   PRIMARY KEY(MC_CODE);

-- SYNONYM
CREATE PUBLIC SYNONYM MC FOR METHODCATEGORIES;

/* METHODS(MET) 
  PK  프로젝트코드
  PK  모듈코드
  PK  업무코드
  PK  메서드코드
  FK  분류코드
*/
CREATE TABLE METHODS(
  MET_MJPROCODE   NCHAR(20)     NOT NULL,
  MET_MJMOUCODE   NCHAR(2)      NOT NULL,
  MET_MJJOSCODE   NCHAR(3)      NOT NULL,
  MET_CODE        NCHAR(4)      NOT NULL,
  MET_NAME        NVARCHAR2(20) NOT NULL,
  MET_MCCODE        NCHAR(2)    NOT NULL
)TABLESPACE USERS;

-- CONSTRINTS
ALTER TABLE METHODS
ADD CONSTRAINT MET_PRO_MOU_JOS_CODE_PK  PRIMARY KEY(MET_MJPROCODE, MET_MJMOUCODE, MET_MJJOSCODE, MET_CODE)
ADD CONSTRAINT MET_PRO_MOU_JOS_FK   FOREIGN KEY(MET_MJPROCODE, MET_MJMOUCODE, MET_MJJOSCODE)
    REFERENCES MODULE_JOB(MJ_PROCODE, MJ_MOUCODE, MJ_JOSCODE)
ADD CONSTRAINT MET_MCCODE_FK    FOREIGN KEY(MET_MCCODE) REFERENCES METHODCATEGORIES(MC_CODE);

-- SYNONYM
CREATE PUBLIC SYNONYM MET FOR METHODS;

/* TABLE CHECK */
--SELECT * FROM PMB;
--SELECT * FROM PRO;
--SELECT * FROM PRM;
--UPDATE PRM SET PRM_POSITION = 'MG' WHERE PRM_PROCODE='22072713111020220701' AND PRM_PMBCODE='20220701';
--COMMIT;
--SELECT * FROM MOU;
--SELECT * FROM JOS;
--SELECT * FROM MJ;
--SELECT * FROM MET;
--SELECT * FROM MC;


--SELECT * FROM ACCESSINFO WHERE PMBCODE = '20220701';
/* 내가 참여하고 있는 프로젝트 정보 */
--SELECT * 
--FROM PRO 
--WHERE PRO_CODE IN(SELECT PRM_PROCODE FROM PRM WHERE PRM_PMBCODE='20220701');

/* 내가 참여하고 있는 프로젝트의 멤버 리스트 */
--SELECT 	PRM_PMBCODE AS PMBCODE, 
--        PRM_POSITION AS PROPOSITION, 
--        PRM_ACCEPT AS PROACCEPT,
--        PMB_NAME AS PMBNAME
--FROM PRM INNER JOIN PMB ON PRM.PRM_PMBCODE = PMB.PMB_CODE
--WHERE PRM_PROCODE = '22072714060320220701';

--UPDATE PRM SET PRM_ACCEPT = 'AC' 
--WHERE PRM_PROCODE = '22072711330320220702' AND PRM_PMBCODE IN('20220701', '20220707');
--UPDATE PRM SET PRM_ACCEPT = 'AC' 
--WHERE PRM_PROCODE = '22072714060320220701' AND PRM_PMBCODE IN('20220708', '20220716');
--COMMIT;


--DELETE FROM PRM;
--DELETE FROM PRO;
COMMIT;

/* 현재 개설된 프로젝트에 속해(인증, 만료) 있는 멤버 */
--SELECT *
--FROM PRM WHERE PRM_PROCODE = '';



/* 현재 개설된 프로젝트에 속해(인증, 만료) 있지 않은 멤버 */
--SELECT *
--FROM PMB WHERE PMB_CODE NOT IN(SELECT PRM_PMBCODE FROM PRM WHERE PRM_PROCODE = '22072716154420220710');
--
--SELECT * FROM AUL;



ALTER TABLE AUTHLOG ADD AUL_PROCODE NCHAR(20) NOT NULL;


/* DATABASE 수정 */
--SELECT * FROM USER_TABLES;
--DELETE FROM PRM;
--DELETE FROM AUL;
COMMIT;

--ALTER TABLE AUTHLOG
--ADD AUL_PROCODE NCHAR(20);

--SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'AUTHLOG';
ALTER TABLE AUTHLOG
DROP CONSTRAINT AUL_SPMB_RPMB_INVITE_PK;
ALTER TABLE AUTHLOG
ADD CONSTRAINT AUL_PRO_SPMB_RPMB_INVITE_PK PRIMARY KEY(AUL_PROCODE, AUL_SPMBCODE, AUL_RPMBCODE, AUL_INVITEDATE);


/* JOB MANAGEMENT */
--SELECT * FROM PRO;
--  DELETE FROM PRO WHERE PRO_CODE LIKE '%0701';
--INSERT INTO PRO(PRO_CODE, PRO_NAME, PRO_COMMENTS, PRO_START, PRO_END, PRO_VISIBLE) 
--    VALUES('22080108000020220701', 'NEW PROJECT', '새로운 프로젝트', '20220805170000', '20220928170000', 'T');
--INSERT INTO PRO(PRO_CODE, PRO_NAME, PRO_COMMENTS, PRO_START, PRO_END, PRO_VISIBLE) 
--    VALUES('22090108000020220701', 'SECOND PROJECT', '두번째 프로젝트', '20220905170000', '20221028170000', 'T');
--INSERT INTO PRO(PRO_CODE, PRO_NAME, PRO_COMMENTS, PRO_START, PRO_END, PRO_VISIBLE) 
--    VALUES('22100108000020220701', 'THIRD PROJECT', '세번째 프로젝트', '20221005170000', '20221128170000', 'T');
--INSERT INTO PRO(PRO_CODE, PRO_NAME, PRO_COMMENTS, PRO_START, PRO_END, PRO_VISIBLE) 
--    VALUES('22110108000020220701', 'FOURTH PROJECT', '네번째 프로젝트', '20221105170000', '20230128170000', 'T');
--INSERT INTO PRO(PRO_CODE, PRO_NAME, PRO_COMMENTS, PRO_START, PRO_END, PRO_VISIBLE) 
--    VALUES('22120108000020220701', 'FIFTH PROJECT', '다섯번째 프로젝트', '20221205170000', '20230228170000', 'T');
--COMMIT;    
--
--SELECT * FROM PRM;
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--    VALUES('22080108000020220701', '20220701', 'MG', 'AC');
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--    VALUES('22080108000020220701', '20220712', NULL, 'AC');
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--    VALUES('22080108000020220701', '20220702', NULL, 'AC');
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--    VALUES('22080108000020220701', '20220708', NULL, 'AC');
--INSERT INTO PRM(PRM_PROCODE, PRM_PMBCODE, PRM_POSITION, PRM_ACCEPT) 
--    VALUES('22080108000020220701', '20220710', NULL, 'AC');
--COMMIT;

--SELECT * FROM USER_TAB_COLS WHERE TABLE_NAME='METHODCATEGORIES';

 INSERT INTO MC(MC_CODE, MC_NAME) VALUES('CT', 'CONTROLLER');
 INSERT INTO MC(MC_CODE, MC_NAME) VALUES('VI', 'VIEW');
 INSERT INTO MC(MC_CODE, MC_NAME) VALUES('MO', 'MODEL');
 INSERT INTO MC(MC_CODE, MC_NAME) VALUES('RD', 'DAO');
 COMMIT;

--SELECT * FROM PRO; -- 22080108000020220701
--    SELECT * FROM PRO WHERE PRO_CODE = '22080108000020220701';
--SELECT * FROM PRM;
--SELECT * FROM MOU;
--    SELECT * FROM MOU WHERE MOU_PROCODE = '22080108000020220701';
--INSERT INTO MOU(MOU_PROCODE, MOU_CODE, MOU_NAME, MOU_COMMENTS) 
--    VALUES('22080108000020220701', '00', 'TEST', 'TEST');
--COMMIT;
--SELECT * FROM JOS;
--SELECT * FROM MJ;
--SELECT * FROM MET;
--SELECT * FROM MC;

-- MODULE LIST
--SELECT * FROM MOU WHERE MOU_PROCODE = '';

-- JOB LIST
--SELECT * FROM JOS WHERE JOS_PROCODE = '';

-- MODULEJOB LIST
--SELECT * FROM MJ WHERE MJ_PROCODE = '';

-- METHOD LIST
--SELECT * FROM MET WHERE MET_MJPROCODE = '';



/* 결과 등록 관련 */
--SELECT * FROM PRO;
--SELECT * FROM PRM;
--SELECT * FROM MOU;
--SELECT * FROM JOS;
--SELECT * FROM MJ;
--SELECT * FROM MET;

-- METHOD TABLE에 진행상태 컬럼 추가
ALTER TABLE METHODS
ADD MET_STATE   NCHAR(2) DEFAULT 'RD';
ALTER TABLE METHODS
ADD CONSTRAINT MET_STATE_FK FOREIGN KEY(MET_STATE) REFERENCES METHODCATEGORIES(MC_CODE);

-- METHODCATEGOREIS에 데이터추가
DELETE FROM MC;
INSERT INTO MC(MC_CODE, MC_NAME) VALUES('RD', '개발전');
INSERT INTO MC(MC_CODE, MC_NAME) VALUES('IN', '개발진행중');
INSERT INTO MC(MC_CODE, MC_NAME) VALUES('CP', '개발완료');
COMMIT;

/* RESULTFILES TABLE(FIL) */
CREATE TABLE RESULTFILES(
  FIL_METMJPROCODE  NCHAR(20)       NOT NULL,
  FIL_METMJMOUCODE  NCHAR(2)        NOT NULL,
  FIL_METMJJOSCODE  NCHAR(3)        NOT NULL,
  FIL_METCODE       NCHAR(4)        NOT NULL, 
  FIL_CODE          NUMBER(2,0)     NOT NULL,
  FIL_NAME          NVARCHAR2(50)   NOT NULL,
  FIL_LOCATION      NVARCHAR2(100)  NOT NULL
)TABLESPACE USERS;

  -- CONSTRAINTS
  ALTER TABLE RESULTFILES
  ADD CONSTRAINT FIL_PRO_MOU_JOS_MET_CODE_PK    
  PRIMARY KEY(FIL_METMJPROCODE, FIL_METMJMOUCODE, FIL_METMJJOSCODE, FIL_METCODE, FIL_CODE)
  ADD CONSTRAINT FIL_PRO_MOU_JOS_MET_FK FOREIGN KEY (FIL_METMJPROCODE, FIL_METMJMOUCODE, FIL_METMJJOSCODE, FIL_METCODE)
  REFERENCES METHODS(MET_MJPROCODE, MET_MJMOUCODE, MET_MJJOSCODE, MET_CODE);
  -- 20230601